from flask import Flask, render_template, request, redirect, session
from flask_socketio import SocketIO, emit
from flask_sqlalchemy import SQLAlchemy
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import base64
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///chat.db'
db = SQLAlchemy(app)
socketio = SocketIO(app)

# Hard-coded user credentials
USERS = {
    'yuvi609@gmail.com': '16@September',
    'priyadevi1395@gmail.com': 'Priya@1395'
}

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(50), unique=True, nullable=False)

class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    encrypted_text = db.Column(db.LargeBinary)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    receiver_id = db.Column(db.Integer, db.ForeignKey('user.id'))

# AES encryption key
encryption_key = os.environ.get('AES_ENCRYPTION_KEY', get_random_bytes(16))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        if email in USERS and USERS[email] == password:
            session['user_id'] = email
            return redirect('/')
        else:
            return 'Invalid credentials', 401
    return render_template('login.html')

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect('/login')
    return render_template('chat.html')

@socketio.on('message')
def handle_message(data):
    # Encryption and message handling logic
    pass

if __name__ == '__main__':
    db.create_all()
    socketio.run(app, debug=True)
